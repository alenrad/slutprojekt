#scoreboard
left_score = 0
right_score = 0

#paddle position
left_y = 260
right_y = 260

#paddle size
paddle_height_left = 100
paddle_height_right = 100

#powerup count
powerup_count = 0

#ball position
ball_x = 400
ball_y = 300

#ball velocity
ball_dx = -5
ball_dy = -5

#little_ball position
little_ball_x = 400
little_ball_y = 300

#little_ball velocity
little_ball_dx = -7
little_ball_dy = -7

#powerup position
powerup_x = 200
powerup_y = 100

#powerup velocity
powerup_dx = 0
powerup_dy = -5

#keys
left_key = ""
right_key = ""

#game-on/over
mode = "instruction-screen"

def reset_game():
    global ball_x, ball_y, ball_dy, ball_dx, left_score, right_score, mode
    global little_ball_x, little_ball_y, little_ball_dx, little_ball_dy
    global powerup_x, powerup_y, powerup_dx, powerup_dy, last_hit1

    #scoreboard
    left_score = 0
    right_score = 0
    
    #paddle position
    left_y = 40
    right_y = 260
    
    #paddle size
    paddle_height_left = 100
    paddle_height_right = 100

    #powerup reset
    powerup_count = 0
    
    #ball position
    ball_x = 390
    ball_y = 290
    
    #ball velocity
    ball_dx = -5
    ball_dy = -5
    
    #little_ball position
    ball_x = 390
    ball_y = 290
    
    #little_ball velocity
    ball_dx = -8
    ball_dy = -8
    
    #powerup position
    powerup_x = 400
    powerup_y = 300

    #powerup velocity
    powerup_dx = 0
    powerup_dy = -7
    
def ball_reset():
    global ball_x, ball_y
    ball_x = 390
    ball_y = 290
    
def powerup_reset():
    global powerup_x, powerup_y
    powerup_x = -1000
    powerup_y = -1000
    
    
def little_ball_reset():
    global little_ball_x, little_ball_y
    little_ball_x = 390
    little_ball_y = 290

def setup():
    size(800,600)
    
def bounce_back_ball_left():
    global left_y, right_y, ball_x, ball_y, ball_dx, ball_dy
    ball_dx = ball_dx * -1
    angle_velocity = atan(ball_dy/ ball_dx)
    angle_velocity += random(-1, 1) 
    velosity = (ball_dy**2 + ball_dx**2)**0.5
    ball_dx = velosity*cos(angle_velocity)
    ball_dy = velosity*sin(angle_velocity)

def bounce_back_ball_right():
    global left_y, right_y, ball_x, ball_y, ball_dx, ball_dy
    ball_dx = ball_dx * -1
    angle_velocity = atan(ball_dy/ ball_dx)
    angle_velocity += random(-1, 1) 
    velosity = (ball_dy**2 + ball_dx**2)**0.5
    ball_dx = velosity*cos(angle_velocity+PI)
    ball_dy = velosity*sin(angle_velocity+PI)
    
def check_and_perform_bounce_on_powerup_paddle():
    global left_y, right_y, ball_x, ball_y, ball_dx, ball_dy
    distance_between_ball_paddle_left = (((left_y - ball_y)**2 + (0.0 - ball_x)**2)**0.5)
    distance_between_ball_paddle_right = (((right_y - ball_y)**2 + (800.0 - ball_x)**2)**0.5)
    perform_bounce_left = distance_between_ball_paddle_left < 90
    perform_bounce_right = distance_between_ball_paddle_right < 90
    
    if perform_bounce_left:
        bounce_back_ball_left()
    if perform_bounce_right:
        bounce_back_ball_right()
    
def check_and_perform_bounce_on_paddles():
    global left_y, right_y, ball_x, ball_y, ball_dx, ball_dy
    distance_between_ball_paddle_left = (((left_y - ball_y)**2 + (0.0 - ball_x)**2)**0.5)
    distance_between_ball_paddle_right = (((right_y - ball_y)**2 + (800.0 - ball_x)**2)**0.5)
    perform_bounce_left = distance_between_ball_paddle_left < 70
    perform_bounce_right = distance_between_ball_paddle_right < 70
    
    if perform_bounce_left:
        bounce_back_ball_left()
    if perform_bounce_right:
        bounce_back_ball_right()
        
def check_and_perform_collision_with_balls():
    global powerup_count,ball_x, ball_y, ball_dx, ball_dy, powerup_x, powerup_y, powerup_dx, powerup_dy, paddle_height_left, paddle_height_right
    global paddle_height_right, paddle_height_left
    distance_between_balls = (((powerup_y - ball_y)**2 + (powerup_x - ball_x)**2)**0.5)
    perform_powerup = distance_between_balls < 20
    
    if perform_powerup and ball_dx > 0 and powerup_count == 0:
        print("left")
        paddle_height_left = paddle_height_left + 100
        check_and_perform_bounce_on_powerup_paddle()
        powerup_count = powerup_count + 1
        powerup_reset()
    if perform_powerup and ball_dx < 0:
        print("right")
        paddle_height_right = 100+50
        check_and_perform_bounce_on_powerup_paddle()
        powerup_count = powerup_count + 1
        powerup_reset()

        
def draw():
    global ball_x, ball_y, ball_dy, ball_dx, left_score, right_score, mode, left_y, right_y
    global little_ball_x, little_ball_y, little_ball_dx, little_ball_dy
    global powerup_x, powerup_y, powerup_dx, powerup_dy, paddle_height_left, paddle_height_right


    #instruction screen look
    background(0)
    if mode == "instruction-screen":
        textSize(30)
        text("Crazy Pong", 310 , 50)
        text("Press any key to start game", 200 , 300)
        text("P1", 50 , 50)
        text("(W/S)", 30 , 90)
        text("P2", 720 , 50)
        text("(I/K)", 705 , 90)
        text("First to 7", 330 , 550)

    elif mode == "game-over":
        if right_score > left_score:
            text("Left player wins", 100, 300)
            text("Press (r) to restart", 100, 350)
        else:
            text("Right player wins", 500, 300)
            text("Press (r) to restart", 500, 350)
    
    elif mode == "game-on":
        if left_key == "w":
            left_y += -6
        elif left_key == "s":
            left_y += 6
        elif right_key == "i":
            right_y += -6
        elif right_key == "k":
            right_y += 6

        #moving ball
        ball_x = ball_x + ball_dx
        ball_y = ball_y + ball_dy
    
        #moving little_ball ball
        little_ball_x = little_ball_x + little_ball_dx
        little_ball_y = little_ball_y + little_ball_dy
        
        #moving powerup ball
        powerup_x = powerup_x + powerup_dx 
        powerup_y = powerup_y + powerup_dy 
        
        #ball bounce off top / bottom
        if ball_y > 580 or ball_y < 0:
            ball_dy = ball_dy * -1
            
        #ball bounce off top / bottom
        if ball_x > 780 or ball_x < 0:
            ball_dx = ball_dx * -1   
            
        #little_ball bounce off top / bottom
        if little_ball_x > 780 or little_ball_x < 0:
            little_ball_dx = little_ball_dx * -1   
            
        #little_ball bounce off top / bottom
        if little_ball_y > 580 or little_ball_y < 0:
            little_ball_dy = little_ball_dy * -1 
            
        #powerup bounce off top / bottom
        if powerup_x > 780 or powerup_x < 0:
            powerup_dx = powerup_dx * -1   
            
        #powerup bounce off top / bottom
        if powerup_y > 580 or powerup_y < 0:
            powerup_dy = powerup_dy * -1 
            
        #scoring - left or right side of screen
        if ball_x > 780:
            right_score += 1
            ball_reset()
        elif ball_x < 0:
            left_score += 1
            ball_reset()
        
        #winning number
        if right_score == 7 or left_score == 7:
            mode = "game-over"
                
        #ball bounce on paddles
        check_and_perform_bounce_on_paddles()    
        
        #left paddle bounce for little_ball    
        if little_ball_x < 50 and little_ball_y > left_y and little_ball_y < (left_y + 80):
            right_score -= 2
            little_ball_reset()
            
        #right paddle bounce for little_ball  
        if little_ball_x > 750 and little_ball_y > right_y and little_ball_y < (right_y + 80):
            left_score -= 2
            little_ball_reset()
            
        #ball bounce on powerup from paddles
        check_and_perform_collision_with_balls()
            
        #paddle touch top/bottom
        if left_y > 550:
            left_y -= 6
        elif left_y < 50:
            left_y += 6
        elif right_y > 550:
            right_y -= 6
        elif right_y < 50:
            right_y += 6
            
    if mode == "game-on" or mode == "game-over":
        #score
        fill(255)
        textSize(28)
        text(right_score, 350, 40)
        text(left_score, 430, 40)
            
        #paddles
        fill(255)
        arc(10, left_y, 100, paddle_height_left, -HALF_PI, HALF_PI)
        arc(790, right_y, 100, paddle_height_right, HALF_PI,TWO_PI-HALF_PI)

        #ball
        fill(255)
        ellipse(ball_x,ball_y,20,20)
        
        #little_ball
        fill(255, 51, 51)
        ellipse(little_ball_x,little_ball_y,5,5)
        
        #powerup ball
        fill(255, 51, 51)
        ellipse(powerup_x, powerup_y, 50, 50)
        
        #line in middle
        fill(255)
        line(400, 800, 400, 0)
        stroke(255)
        
def keyReleased():
    global left_key, right_key
    #p1 keys
    if key == "w":
        left_key = ""

    elif key == "s":
        left_key = ""
    #p2 keys
    if key == "i":
        right_key = ""
        
    elif key == "k":
        right_key = ""

#key pressed actions
def keyPressed():
    global left_y, right_y, mode, left_key, right_key
            
    if mode == "instruction-screen":
        mode = "game-on"
            
    if mode =="game-over" and key == "r":
        mode = "game-on"
        reset_game()
        
    #p1 keys
    if key == "w":
        left_key = "w"
    elif key == "s":
        left_key = "s"
        
    #p2 keys
    if key == "i":
        right_key = "i"
    elif key == "k":
        right_key = "k"
        
def mousePressed():
    print(mouseX, mouseY)
